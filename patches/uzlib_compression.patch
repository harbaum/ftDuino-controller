From c0641152a7b9a9242cdba648de51baaecfd6c7bf Mon Sep 17 00:00:00 2001
From: Till Harbaum <till.harbaum@ionos.com>
Date: Sun, 28 Feb 2021 23:27:39 -0800
Subject: [PATCH 1/2] Add uzlib gzip compression support

---
 extmod/moduzlib.c          |  60 ++++++++
 extmod/uzlib/defl_static.c | 305 +++++++++++++++++++++++++++++++++++++
 extmod/uzlib/defl_static.h |   5 +
 extmod/uzlib/genlz77.c     | 124 +++++++++++++++
 4 files changed, 494 insertions(+)
 create mode 100644 extmod/uzlib/defl_static.c
 create mode 100644 extmod/uzlib/genlz77.c

diff --git a/extmod/moduzlib.c b/extmod/moduzlib.c
index ab70d67479..a4063c3f2d 100644
--- a/extmod/moduzlib.c
+++ b/extmod/moduzlib.c
@@ -27,6 +27,7 @@
 #include <stdio.h>
 #include <string.h>
 
+#include "py/gc.h"
 #include "py/runtime.h"
 #include "py/stream.h"
 #include "py/mperrno.h"
@@ -206,9 +207,66 @@ STATIC mp_obj_t mod_uzlib_decompress(size_t n_args, const mp_obj_t *args) {
 STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mod_uzlib_decompress_obj, 1, 3, mod_uzlib_decompress);
 
 #if !MICROPY_ENABLE_DYNRUNTIME
+STATIC mp_obj_t mod_uzlib_gzip(size_t n_args, const mp_obj_t *args) {
+    mp_obj_t data = args[0];
+    mp_buffer_info_t bufinfo;
+    mp_get_buffer_raise(data, &bufinfo, MP_BUFFER_READ);
+    int len = bufinfo.len;
+
+    struct uzlib_comp *comp = m_new_obj(struct uzlib_comp);
+    memset(comp, 0, sizeof(*comp));
+
+    // set deflate compression parameters for gzip
+    comp->dict_size = 32768;
+    comp->hash_bits = 12;
+    size_t hash_size = sizeof(uzlib_hash_entry_t) * (1 << comp->hash_bits);
+    comp->hash_table = gc_alloc(hash_size, false);
+    memset(comp->hash_table, 0, hash_size);
+
+    zlib_start_block(&comp->out);
+    uzlib_compress(comp, bufinfo.buf, len);
+    zlib_finish_block(&comp->out);
+
+    DEBUG_printf("compressed from %u to %u raw bytes\n", len, comp->out.outlen);
+
+    // allocate final buffer incl. 10 header bytes and 8 trailing bytes
+    mp_uint_t dest_buf_size = comp->out.outlen + 18;
+    byte *dest_buf = m_new(byte, dest_buf_size);
+
+    /* GZIP header bytes:                                  */
+    /* 0-1: GZIP ID1, ID2 = 0x1f, 0x8b                     */
+    /* 2:   compression method (8 = deflate)               */
+    /* 3:   flags (0 = no additional header fields)        */
+    /* 4-7: modification time (0 = none)                   */
+    /* 8:   extra flags (4 = compressor used fastest algo) */
+    /* 9:   operating system (3 = unix)                    */
+    static const unsigned char gzip_header[] =
+      { 0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03 };
+
+    memcpy(dest_buf, gzip_header, sizeof(gzip_header));
+    memcpy(dest_buf+sizeof(gzip_header), comp->out.outbuf, comp->out.outlen);
+    
+    // append 32 bit crc of original data
+    uint32_t offset = sizeof(gzip_header)+comp->out.outlen;
+    uint32_t crc = ~uzlib_crc32(bufinfo.buf, len, ~0);
+    memcpy(dest_buf+offset, &crc, sizeof(crc));
+    // append 32 bit length of original data
+    memcpy(dest_buf+offset+sizeof(crc), &len, sizeof(len));
+
+    // free all temporarily used memory
+    free(comp->out.outbuf);     // free internal buffer allocated by compression
+    gc_free(comp->hash_table);
+    m_del_obj(struct uzlib_comp, comp);
+    
+    // return result as MP bytearray
+    return mp_obj_new_bytearray_by_ref(dest_buf_size, dest_buf);
+}
+STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(mod_uzlib_gzip_obj, 1, 3, mod_uzlib_gzip);
+
 STATIC const mp_rom_map_elem_t mp_module_uzlib_globals_table[] = {
     { MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_uzlib) },
     { MP_ROM_QSTR(MP_QSTR_decompress), MP_ROM_PTR(&mod_uzlib_decompress_obj) },
+    { MP_ROM_QSTR(MP_QSTR_gzip), MP_ROM_PTR(&mod_uzlib_gzip_obj) },
     { MP_ROM_QSTR(MP_QSTR_DecompIO), MP_ROM_PTR(&decompio_type) },
 };
 
@@ -228,5 +286,7 @@ const mp_obj_module_t mp_module_uzlib = {
 #include "uzlib/tinfgzip.c"
 #include "uzlib/adler32.c"
 #include "uzlib/crc32.c"
+#include "uzlib/genlz77.c"
+#include "uzlib/defl_static.c"
 
 #endif // MICROPY_PY_UZLIB
diff --git a/extmod/uzlib/defl_static.c b/extmod/uzlib/defl_static.c
new file mode 100644
index 0000000000..80ea1977e3
--- /dev/null
+++ b/extmod/uzlib/defl_static.c
@@ -0,0 +1,305 @@
+/*
+
+Routines in this file are based on:
+Zlib (RFC1950 / RFC1951) compression for PuTTY.
+
+PuTTY is copyright 1997-2014 Simon Tatham.
+
+Portions copyright Robert de Bath, Joris van Rantwijk, Delian
+Delchev, Andreas Schultz, Jeroen Massar, Wez Furlong, Nicolas Barry,
+Justin Bradford, Ben Harris, Malcolm Smith, Ahmad Khalifa, Markus
+Kuhn, Colin Watson, and CORE SDI S.A.
+
+Permission is hereby granted, free of charge, to any person
+obtaining a copy of this software and associated documentation files
+(the "Software"), to deal in the Software without restriction,
+including without limitation the rights to use, copy, modify, merge,
+publish, distribute, sublicense, and/or sell copies of the Software,
+and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE
+FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
+CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+*/
+
+#include <stdlib.h>
+#include <stdint.h>
+#include <string.h>
+#include <assert.h>
+#include "defl_static.h"
+
+#define snew(type) ( (type *) malloc(sizeof(type)) )
+#define snewn(n, type) ( (type *) malloc((n) * sizeof(type)) )
+#define sresize(x, n, type) ( (type *) realloc((x), (n) * sizeof(type)) )
+#define sfree(x) ( free((x)) )
+
+#ifndef FALSE
+#define FALSE 0
+#define TRUE (!FALSE)
+#endif
+
+/* ----------------------------------------------------------------------
+ * Zlib compression. We always use the static Huffman tree option.
+ * Mostly this is because it's hard to scan a block in advance to
+ * work out better trees; dynamic trees are great when you're
+ * compressing a large file under no significant time constraint,
+ * but when you're compressing little bits in real time, things get
+ * hairier.
+ * 
+ * I suppose it's possible that I could compute Huffman trees based
+ * on the frequencies in the _previous_ block, as a sort of
+ * heuristic, but I'm not confident that the gain would balance out
+ * having to transmit the trees.
+ */
+
+void outbits(struct Outbuf *out, unsigned long bits, int nbits)
+{
+    assert(out->noutbits + nbits <= 32);
+    out->outbits |= bits << out->noutbits;
+    out->noutbits += nbits;
+    while (out->noutbits >= 8) {
+        if (out->outlen >= out->outsize) {
+            out->outsize = out->outlen + 64;
+            out->outbuf = sresize(out->outbuf, out->outsize, unsigned char);
+        }
+        out->outbuf[out->outlen++] = (unsigned char) (out->outbits & 0xFF);
+        out->outbits >>= 8;
+        out->noutbits -= 8;
+    }
+}
+
+static const unsigned char mirrorbytes[256] = {
+    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
+    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
+    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
+    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
+    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
+    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
+    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
+    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
+    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
+    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
+    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
+    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
+    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
+    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
+    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
+    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
+    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
+    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
+    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
+    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
+    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
+    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
+    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
+    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
+    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
+    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
+    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
+    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
+    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
+    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
+    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
+    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,
+};
+
+typedef struct {
+    short code, extrabits;
+    uint16_t min, max;
+} coderecord;
+
+static const coderecord lencodes[] = {
+    {257, 0, 3, 3},
+    {258, 0, 4, 4},
+    {259, 0, 5, 5},
+    {260, 0, 6, 6},
+    {261, 0, 7, 7},
+    {262, 0, 8, 8},
+    {263, 0, 9, 9},
+    {264, 0, 10, 10},
+    {265, 1, 11, 12},
+    {266, 1, 13, 14},
+    {267, 1, 15, 16},
+    {268, 1, 17, 18},
+    {269, 2, 19, 22},
+    {270, 2, 23, 26},
+    {271, 2, 27, 30},
+    {272, 2, 31, 34},
+    {273, 3, 35, 42},
+    {274, 3, 43, 50},
+    {275, 3, 51, 58},
+    {276, 3, 59, 66},
+    {277, 4, 67, 82},
+    {278, 4, 83, 98},
+    {279, 4, 99, 114},
+    {280, 4, 115, 130},
+    {281, 5, 131, 162},
+    {282, 5, 163, 194},
+    {283, 5, 195, 226},
+    {284, 5, 227, 257},
+    {285, 0, 258, 258},
+};
+
+static const coderecord distcodes[] = {
+    {0, 0, 1, 1},
+    {1, 0, 2, 2},
+    {2, 0, 3, 3},
+    {3, 0, 4, 4},
+    {4, 1, 5, 6},
+    {5, 1, 7, 8},
+    {6, 2, 9, 12},
+    {7, 2, 13, 16},
+    {8, 3, 17, 24},
+    {9, 3, 25, 32},
+    {10, 4, 33, 48},
+    {11, 4, 49, 64},
+    {12, 5, 65, 96},
+    {13, 5, 97, 128},
+    {14, 6, 129, 192},
+    {15, 6, 193, 256},
+    {16, 7, 257, 384},
+    {17, 7, 385, 512},
+    {18, 8, 513, 768},
+    {19, 8, 769, 1024},
+    {20, 9, 1025, 1536},
+    {21, 9, 1537, 2048},
+    {22, 10, 2049, 3072},
+    {23, 10, 3073, 4096},
+    {24, 11, 4097, 6144},
+    {25, 11, 6145, 8192},
+    {26, 12, 8193, 12288},
+    {27, 12, 12289, 16384},
+    {28, 13, 16385, 24576},
+    {29, 13, 24577, 32768},
+};
+
+void zlib_literal(struct Outbuf *out, unsigned char c)
+{
+    if (out->comp_disabled) {
+        /*
+         * We're in an uncompressed block, so just output the byte.
+         */
+        outbits(out, c, 8);
+        return;
+    }
+
+    if (c <= 143) {
+        /* 0 through 143 are 8 bits long starting at 00110000. */
+        outbits(out, mirrorbytes[0x30 + c], 8);
+    } else {
+        /* 144 through 255 are 9 bits long starting at 110010000. */
+        outbits(out, 1 + 2 * mirrorbytes[0x90 - 144 + c], 9);
+    }
+}
+
+void zlib_match(struct Outbuf *out, int distance, int len)
+{
+    const coderecord *d, *l;
+    int i, j, k;
+
+    assert(!out->comp_disabled);
+
+    while (len > 0) {
+        int thislen;
+
+        /*
+         * We can transmit matches of lengths 3 through 258
+         * inclusive. So if len exceeds 258, we must transmit in
+         * several steps, with 258 or less in each step.
+         * 
+         * Specifically: if len >= 261, we can transmit 258 and be
+         * sure of having at least 3 left for the next step. And if
+         * len <= 258, we can just transmit len. But if len == 259
+         * or 260, we must transmit len-3.
+         */
+        thislen = (len > 260 ? 258 : len <= 258 ? len : len - 3);
+        len -= thislen;
+
+        /*
+         * Binary-search to find which length code we're
+         * transmitting.
+         */
+        i = -1;
+        j = sizeof(lencodes) / sizeof(*lencodes);
+        while (1) {
+            assert(j - i >= 2);
+            k = (j + i) / 2;
+            if (thislen < lencodes[k].min)
+                j = k;
+            else if (thislen > lencodes[k].max)
+                i = k;
+            else {
+                l = &lencodes[k];
+                break;                 /* found it! */
+            }
+        }
+
+        /*
+         * Transmit the length code. 256-279 are seven bits
+         * starting at 0000000; 280-287 are eight bits starting at
+         * 11000000.
+         */
+        if (l->code <= 279) {
+            outbits(out, mirrorbytes[(l->code - 256) * 2], 7);
+        } else {
+            outbits(out, mirrorbytes[0xc0 - 280 + l->code], 8);
+        }
+
+        /*
+         * Transmit the extra bits.
+         */
+        if (l->extrabits)
+            outbits(out, thislen - l->min, l->extrabits);
+
+        /*
+         * Binary-search to find which distance code we're
+         * transmitting.
+         */
+        i = -1;
+        j = sizeof(distcodes) / sizeof(*distcodes);
+        while (1) {
+            assert(j - i >= 2);
+            k = (j + i) / 2;
+            if (distance < distcodes[k].min)
+                j = k;
+            else if (distance > distcodes[k].max)
+                i = k;
+            else {
+                d = &distcodes[k];
+                break;                 /* found it! */
+            }
+        }
+
+        /*
+         * Transmit the distance code. Five bits starting at 00000.
+         */
+        outbits(out, mirrorbytes[d->code * 8], 5);
+
+        /*
+         * Transmit the extra bits.
+         */
+        if (d->extrabits)
+            outbits(out, distance - d->min, d->extrabits);
+    }
+}
+
+void zlib_start_block(struct Outbuf *out)
+{
+//    outbits(out, 0x9C78, 16);
+    outbits(out, 1, 1); /* Final block */
+    outbits(out, 1, 2); /* Static huffman block */
+}
+
+void zlib_finish_block(struct Outbuf *out)
+{
+    outbits(out, 0, 7); /* close block */
+    outbits(out, 0, 7); /* Make sure all bits are flushed */
+}
diff --git a/extmod/uzlib/defl_static.h b/extmod/uzlib/defl_static.h
index 292734d773..8e1866d6d8 100644
--- a/extmod/uzlib/defl_static.h
+++ b/extmod/uzlib/defl_static.h
@@ -30,6 +30,9 @@
    They may be altered/distinct from the originals used in PuTTY source
    code. */
 
+#ifndef DEFL_STATIC_H_INCLUDED
+#define DEFL_STATIC_H_INCLUDED
+
 struct Outbuf {
     unsigned char *outbuf;
     int outlen, outsize;
@@ -43,3 +46,5 @@ void zlib_start_block(struct Outbuf *ctx);
 void zlib_finish_block(struct Outbuf *ctx);
 void zlib_literal(struct Outbuf *ectx, unsigned char c);
 void zlib_match(struct Outbuf *ectx, int distance, int len);
+
+#endif /* DEFL_STATIC_H_INCLUDED */
\ No newline at end of file
diff --git a/extmod/uzlib/genlz77.c b/extmod/uzlib/genlz77.c
new file mode 100644
index 0000000000..ede1fc9e77
--- /dev/null
+++ b/extmod/uzlib/genlz77.c
@@ -0,0 +1,124 @@
+/*
+ * genlz77  -  Generic LZ77 compressor
+ *
+ * Copyright (c) 2014 by Paul Sokolovsky
+ *
+ * This software is provided 'as-is', without any express
+ * or implied warranty.  In no event will the authors be
+ * held liable for any damages arising from the use of
+ * this software.
+ *
+ * Permission is granted to anyone to use this software
+ * for any purpose, including commercial applications,
+ * and to alter it and redistribute it freely, subject to
+ * the following restrictions:
+ *
+ * 1. The origin of this software must not be
+ *    misrepresented; you must not claim that you
+ *    wrote the original software. If you use this
+ *    software in a product, an acknowledgment in
+ *    the product documentation would be appreciated
+ *    but is not required.
+ *
+ * 2. Altered source versions must be plainly marked
+ *    as such, and must not be misrepresented as
+ *    being the original software.
+ *
+ * 3. This notice may not be removed or altered from
+ *    any source distribution.
+ */
+#include <stdint.h>
+#include <string.h>
+#include <stdio.h>
+#include "uzlib.h"
+
+#if 0
+#define HASH_BITS 12
+#else
+#define HASH_BITS data->hash_bits
+#endif
+
+#define HASH_SIZE (1<<HASH_BITS)
+
+/* Minimum and maximum length of matches to look for, inclusive */
+#define MIN_MATCH 3
+#define MAX_MATCH 258
+
+/* Max offset of the match to look for, inclusive */
+#if 0
+#define MAX_OFFSET 32768
+#else
+#define MAX_OFFSET data->dict_size
+#endif
+
+/* Hash function can be defined as macro or as inline function */
+
+/*#define HASH(p) (p[0] + p[1] + p[2])*/
+
+/* This is hash function from liblzf */
+static inline int HASH(struct uzlib_comp *data, const uint8_t *p) {
+    int v = (p[0] << 16) | (p[1] << 8) | p[2];
+    int hash = ((v >> (3*8 - HASH_BITS)) - v) & (HASH_SIZE - 1);
+    return hash;
+}
+
+#ifdef DUMP_LZTXT
+
+/* Counter for approximate compressed length in LZTXT mode. */
+/* Literal is counted as 1, copy as 2 bytes. */
+unsigned approx_compressed_len;
+
+void literal(void *data, uint8_t val)
+{
+    printf("L%02x # %c\n", val, (val >= 0x20 && val <= 0x7e) ? val : '?');
+    approx_compressed_len++;
+}
+
+void copy(void *data, unsigned offset, unsigned len)
+{
+    printf("C-%u,%u\n", offset, len);
+    approx_compressed_len += 2;
+}
+
+#else
+
+static inline void literal(void *data, uint8_t val)
+{
+    zlib_literal(data, val);
+}
+
+static inline void copy(void *data, unsigned offset, unsigned len)
+{
+    zlib_match(data, offset, len);
+}
+
+#endif
+
+
+void uzlib_compress(struct uzlib_comp *data, const uint8_t *src, unsigned slen)
+{
+    const uint8_t *top = src + slen - MIN_MATCH;
+    while (src < top) {
+        int h = HASH(data, src);
+        const uint8_t **bucket = &data->hash_table[h & (HASH_SIZE - 1)];
+        const uint8_t *subs = *bucket;
+        *bucket = src;
+        if (subs && src > subs && (src - subs) <= MAX_OFFSET && !memcmp(src, subs, MIN_MATCH)) {
+            src += MIN_MATCH;
+            const uint8_t *m = subs + MIN_MATCH;
+            int len = MIN_MATCH;
+            while (*src == *m && len < MAX_MATCH && src < top) {
+                src++; m++; len++;
+            }
+            copy(data, src - len - subs, len);
+        } else {
+            literal(data, *src++);
+        }
+    }
+    // Process buffer tail, which is less than MIN_MATCH
+    // (and so it doesn't make sense to look for matches there)
+    top += MIN_MATCH;
+    while (src < top) {
+        literal(data, *src++);
+    }
+}

From bb01aac8dc7ac85b680c3ad3edc53f1ae53b58d3 Mon Sep 17 00:00:00 2001
From: Till Harbaum <till.harbaum@ionos.com>
Date: Sun, 28 Feb 2021 23:58:46 -0800
Subject: [PATCH 2/2] Add missing stdlib include for free()

---
 extmod/moduzlib.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/extmod/moduzlib.c b/extmod/moduzlib.c
index a4063c3f2d..2e9c00363d 100644
--- a/extmod/moduzlib.c
+++ b/extmod/moduzlib.c
@@ -26,6 +26,7 @@
 
 #include <stdio.h>
 #include <string.h>
+#include <stdlib.h>
 
 #include "py/gc.h"
 #include "py/runtime.h"
