diff -Naur orig/lib/lv_bindings/driver/esp32/espidf.h new/lib/lv_bindings/driver/esp32/espidf.h
--- orig/lib/lv_bindings/driver/esp32/espidf.h	2021-02-10 18:24:03.000000000 +0100
+++ new/lib/lv_bindings/driver/esp32/espidf.h	2021-03-19 12:52:34.939185388 +0100
@@ -122,6 +122,62 @@
     config->user_data = user_data;
 }
 
+// -vv- http server -vv-------------------------------------------------------
+
+#include "esp_http_server.h"
+
+typedef void * SemaphoreHandle_t;
+#include "http_server.h"
+
+static inline esp_err_t http_server_start(http_server_t *server) {
+  return http_server_start_internal(server);
+}
+
+static inline esp_err_t http_server_stop(http_server_t *server) {
+  return http_server_stop_internal(server);
+}
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+static inline esp_err_t http_server_queue_work(http_server_t *server, http_server_worker_t *worker, void (*worker_fun)(struct http_server_worker *), void *user_data)
+{
+  worker->function = worker_fun;
+  worker->user_data = user_data;
+  worker->ctx = http_create_worker_obj(worker);
+
+  return httpd_queue_work(server->handle, http_server_worker_internal_handler, worker);
+}
+#endif
+
+static inline esp_err_t http_server_register(http_server_t *server, http_server_handler_t *data, esp_err_t (*handler_cb)(struct http_server_handler *, httpd_req_t *), void *user_data)
+{
+  data->handler_cb = handler_cb;
+  data->user_data = user_data;
+  
+  data->httpd_uri.handler = http_server_internal_handler;
+  data->httpd_uri.user_ctx = data;
+  data->req = http_create_req_obj();
+  data->event_httpd = xSemaphoreCreateBinary();
+
+  data->lock = xSemaphoreCreateBinary();  // handler lock, initially taken
+  xSemaphoreGive(data->lock);             // release it
+
+  return httpd_register_uri_handler(server->handle, &(data->httpd_uri));
+}
+
+// URI is a array of char in httpd_req_t. This helper makes it available as a string
+static inline const char *httpd_req_get_uri(httpd_req_t *req) {
+  return req->uri;
+}
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+// schedule a packet for async transmission
+static inline void ws_schedule_frame(http_server_handler_t *handler, httpd_ws_frame_t *frame) {
+  ws_schedule_frame_internal(handler, frame);
+}
+#endif
+
+// -^^- http server -^^-------------------------------------------------------
+
 // We don't want the whole FreeRTOS, only selected functions
 
 void task_delay_ms(int ms);
diff -Naur orig/lib/lv_bindings/driver/esp32/http_server.c new/lib/lv_bindings/driver/esp32/http_server.c
--- orig/lib/lv_bindings/driver/esp32/http_server.c	1970-01-01 01:00:00.000000000 +0100
+++ new/lib/lv_bindings/driver/esp32/http_server.c	2021-03-19 12:52:46.139335453 +0100
@@ -0,0 +1,146 @@
+#include "py/obj.h"
+#include "py/gc.h"
+#include "py/runtime.h"
+#include "esp_http_server.h"
+
+#include "http_server.h"
+#include "lib/lv_bindings/driver/include/common.h"
+
+#if CONFIG_HTTPD_MAX_REQ_HDR_LEN < 1024
+#error Please increase CONFIG_HTTPD_MAX_REQ_HDR_LEN to 1024
+#endif
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+// This is the function that is scheduled and run in Micropython thread
+STATIC mp_obj_t http_server_worker_handler_cb(mp_obj_t arg)
+{
+  mp_ptr_t *ctx = MP_OBJ_TO_PTR(arg);
+  http_server_worker_t *worker = ctx->ptr;
+  worker->function(worker);
+  return mp_const_none;
+}
+
+STATIC MP_DEFINE_CONST_FUN_OBJ_1(http_server_worker_handler_cb_obj, http_server_worker_handler_cb);
+ 
+void http_server_worker_internal_handler(void *arg) {
+  http_server_worker_t *worker = (http_server_worker_t *)arg;  
+  if(!mp_sched_schedule((mp_obj_t)&http_server_worker_handler_cb_obj, worker->ctx)) {
+    printf("Scheduling failed ...\n");
+    return;
+  }  
+}
+
+void *http_create_worker_obj(http_server_worker_t *worker) {
+  return NEW_PTR_OBJ(http_server_worker_t, worker);
+}
+
+// schedule a packet for async transmission
+void ws_schedule_frame_internal(http_server_handler_t *handler, httpd_ws_frame_t *frame) {
+  // make a local copy of the frame incl payload
+  httpd_ws_frame_t *new_frame = gc_alloc(sizeof(httpd_ws_frame_t)+frame->len, false);
+
+  // copy frame info
+  memcpy(new_frame, frame, sizeof(httpd_ws_frame_t));
+  // copy payload right behind frame structure. This way we prevent
+  // GC from freeing it
+  byte *payload = ((byte*)new_frame)+sizeof(httpd_ws_frame_t);
+  memcpy(payload, frame->payload, frame->len);
+  new_frame->payload = payload;  // adjust payload pointer to point to copy
+  
+  // store frame in handler for transmission
+  handler->ws_async_frame[handler->ws_async_frame_num++] = new_frame;
+}
+#endif
+
+esp_err_t http_server_start_internal(http_server_t *server) {
+  /* Generate default configuration */
+  static const httpd_config_t dc = HTTPD_DEFAULT_CONFIG();
+  memcpy(&(server->config), &dc, sizeof(httpd_config_t));
+  /* enable wildcard matching by default */
+  server->config.uri_match_fn = httpd_uri_match_wildcard;
+  /* force running on core 1 */
+  server->config.core_id = 1;
+  server->config.lru_purge_enable = true;
+  
+  return httpd_start(&(server->handle), &(server->config));
+}
+
+esp_err_t http_server_stop_internal(http_server_t *server) {
+  return httpd_stop(server->handle);
+}
+
+// This is the function that is scheduled and run in Micropython thread
+STATIC mp_obj_t http_server_handler_cb(mp_obj_t arg)
+{
+  // printf("http_server_handler_cb(%p)\n", arg);
+  // printf(" MP_STATE_VM(sched_queue)=%p\n", MP_STATE_VM(sched_queue));
+  mp_ptr_t *ctx = MP_OBJ_TO_PTR(arg);
+  httpd_req_t *req = ctx->ptr;
+  http_server_handler_t *data = req->user_ctx;
+
+  data->res = data->handler_cb(data, req);
+
+  xSemaphoreGive(data->event_httpd);  // final "give" as we are done
+  return mp_const_none;
+}
+
+STATIC MP_DEFINE_CONST_FUN_OBJ_1(http_server_handler_cb_obj, http_server_handler_cb);
+
+void *http_create_req_obj(void) {
+  return NEW_PTR_OBJ(httpd_req_t, NULL);
+}
+
+esp_err_t http_server_internal_handler(httpd_req_t *req) {
+  // printf("http_server_internal_handler(%p)\n", req);
+  http_server_handler_t *data = req->user_ctx;
+  // printf("  handler=%p\n", data);
+
+  if(!data) {
+    printf("http_server_internal_handler: data not set\n");
+    return 0;
+  }
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+  data->ws_async_frame_num = 0;  // reset async frame.
+#endif
+  
+  xSemaphoreTake(data->lock, portMAX_DELAY);  // handler in use
+
+  // Make sure both semaphores start taken. This should actually not be
+  // necessary as they both should be taken
+  xSemaphoreTake(data->event_httpd, 0);
+
+  // overwrite req pointer
+  ((mp_ptr_t*)(data->req))->ptr = req;
+
+  // printf("mp_sched_schedule(%p,%p)\n", &http_server_handler_cb_obj, data->req);
+  // printf(" MP_STATE_VM(sched_queue)=%p\n", MP_STATE_VM(sched_queue));
+  if(!mp_sched_schedule((mp_obj_t)&http_server_handler_cb_obj, data->req)) {
+    printf("Scheduling failed ...\n");
+    httpd_resp_set_status(req, "503 Service Unavailable");
+    httpd_resp_sendstr(req, "<h1>Internal problem: Scheduler failed</h1>");
+    xSemaphoreGive(data->lock);  // handler free
+    return 0;
+  }
+
+  xSemaphoreTake(data->event_httpd, portMAX_DELAY);  // wait for python callback to give
+
+  // whole transfer done. 
+  xSemaphoreGive(data->lock);  // handler free
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+  if(data->ws_async_frame_num) {
+    for(int i=0;i<data->ws_async_frame_num;i++) {
+      // printf("WS%d=%p (%p/%d)\n", i, data->ws_async_frame[i],
+      //        data->ws_async_frame[i]->payload, data->ws_async_frame[i]->len);
+      if(httpd_ws_send_frame(req, data->ws_async_frame[i]))
+	printf("httpd_ws_send_frame() failed\n");
+      gc_free(data->ws_async_frame[i]);
+    }
+    data->ws_async_frame_num = 0;
+  }
+#endif
+  
+  return data->res;
+}
+
diff -Naur orig/lib/lv_bindings/driver/esp32/http_server.h new/lib/lv_bindings/driver/esp32/http_server.h
--- orig/lib/lv_bindings/driver/esp32/http_server.h	1970-01-01 01:00:00.000000000 +0100
+++ new/lib/lv_bindings/driver/esp32/http_server.h	2021-03-19 12:52:46.139335453 +0100
@@ -0,0 +1,65 @@
+// httpd_server.h
+
+#ifndef HTTPD_SERVER_H
+#define HTTPD_SERVER_H
+
+extern esp_err_t http_server_internal_handler(httpd_req_t *req);
+
+enum {
+      http_server_DELETE = 0,
+      http_server_GET,
+      http_server_HEAD,
+      http_server_POST,
+      http_server_PUT
+};
+typedef uint8_t http_server_method_t;
+
+typedef struct {
+  httpd_handle_t handle;
+  httpd_config_t config;
+
+  void *user_data;
+} http_server_t;
+
+extern esp_err_t http_server_start_internal(http_server_t *server);
+extern esp_err_t http_server_stop_internal(http_server_t *server);
+extern void *http_create_req_obj(void);
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+extern void http_server_worker_internal_handler(void *arg);
+
+typedef struct http_server_worker {
+  void *ctx;
+  void (*function)(struct http_server_worker *worker);
+  void *user_data;
+  int fd;
+} http_server_worker_t;
+
+extern void *http_create_worker_obj(http_server_worker_t *);
+#endif
+
+typedef struct http_server_handler {
+  SemaphoreHandle_t lock;    // main handler lock
+
+  // Filled by the Python user (only "uri" and "method" on httpd_uri):
+  httpd_uri_t httpd_uri;
+  void *req;
+  
+  esp_err_t (*handler_cb)(struct http_server_handler *, httpd_req_t *);
+  void *user_data;
+
+  SemaphoreHandle_t event_httpd;   // httpd waits for python
+  esp_err_t res;                   // callback result
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+  // up to ten frames can be scheduled for async transmission
+  int ws_async_frame_num;
+  httpd_ws_frame_t *ws_async_frame[10];
+#endif
+} http_server_handler_t;
+
+#ifdef CONFIG_HTTPD_WS_SUPPORT
+extern void ws_schedule_frame_internal(http_server_handler_t *, httpd_ws_frame_t *);
+#endif
+
+#endif // HTTPD_SERVER_H
diff -Naur orig/ports/esp32/boards/GENERIC_SPIRAM/mpconfigboard.mk new/ports/esp32/boards/GENERIC_SPIRAM/mpconfigboard.mk
--- orig/ports/esp32/boards/GENERIC_SPIRAM/mpconfigboard.mk	2021-02-10 18:28:10.000000000 +0100
+++ new/ports/esp32/boards/GENERIC_SPIRAM/mpconfigboard.mk	2021-02-10 18:28:41.000000000 +0100
@@ -1,3 +1,4 @@
 SDKCONFIG += boards/sdkconfig.base
 SDKCONFIG += boards/sdkconfig.spiram
 SDKCONFIG += boards/sdkconfig.240mhz
+SDKCONFIG += boards/sdkconfig.http_server
diff -Naur orig/ports/esp32/boards/sdkconfig.http_server new/ports/esp32/boards/sdkconfig.http_server
--- orig/ports/esp32/boards/sdkconfig.http_server	1970-01-01 01:00:00.000000000 +0100
+++ new/ports/esp32/boards/sdkconfig.http_server	2021-02-10 18:30:28.000000000 +0100
@@ -0,0 +1,4 @@
+# MicroPython on ESP32, ESP IDF configuration for httpd
+
+CONFIG_HTTPD_WS_SUPPORT=y
+CONFIG_HTTPD_MAX_REQ_HDR_LEN=1024
diff -Naur orig/ports/esp32/Makefile new/ports/esp32/Makefile
--- orig/ports/esp32/Makefile	2021-02-10 18:25:43.000000000 +0100
+++ new/ports/esp32/Makefile	2021-02-10 18:26:37.000000000 +0100
@@ -167,6 +167,9 @@
 
 INC_ESPCOMP += -I$(ESPCOMP)/esp_http_client/include
 INC_ESPCOMP += -I$(ESPCOMP)/esp_http_client/lib/include
+INC_ESPCOMP += -I$(ESPCOMP)/esp_http_server/include
+INC_ESPCOMP += -I$(ESPCOMP)/esp_http_server/src/port/esp32
+INC_ESPCOMP += -I$(ESPCOMP)/esp_http_server/src/util
 INC_ESPCOMP += -I$(ESPCOMP)/nghttp/port/include
 INC_ESPCOMP += -I$(ESPCOMP)/nghttp/nghttp2/lib/includes
 INC_ESPCOMP += -I$(ESPCOMP)/nghttp/private_include
@@ -403,8 +406,9 @@
 	lib/lv_bindings/driver/esp32/modrtch.c \
 	lib/lv_bindings/driver/esp32/espidf.c \
 	lib/lv_bindings/driver/esp32/sh2lib.c \
+	lib/lv_bindings/driver/esp32/http_server.c \
 	$(ESPIDFMOD_MODULE)
-	
+
 #	lib/lv_bindings/driver/esp32/modxpt2046.c
 #	lib/lv_bindings/driver/esp32/modILI9341.c
 
@@ -559,6 +563,11 @@
 	$(wildcard $(ESPCOMP)/esp_http_client/lib/*.c) \
 	)
 
+ESPIDF_HTTP_SERVER_O = $(patsubst %.c,%.o,\
+	$(wildcard $(ESPCOMP)/esp_http_server/src/*.c) \
+	$(wildcard $(ESPCOMP)/esp_http_server/src/util/*.c) \
+	)
+
 ESPIDF_NGHTTP_O = $(patsubst %.c,%.o,\
 	$(wildcard $(ESPCOMP)/nghttp/nghttp2/lib/*.c) \
 	$(wildcard $(ESPCOMP)/nghttp/port/*.c) \
@@ -692,6 +701,7 @@
 $(eval $(call gen_espidf_lib_rule,mdns,$(ESPIDF_MDNS_O)))
 
 $(eval $(call gen_espidf_lib_rule,esp_http_client,$(ESPIDF_HTTP_CLIENT_O)))
+$(eval $(call gen_espidf_lib_rule,esp_http_server,$(ESPIDF_HTTP_SERVER_O)))
 $(eval $(call gen_espidf_lib_rule,esp_nghttp,$(ESPIDF_NGHTTP_O)))
 $(eval $(call gen_espidf_lib_rule,esp_tcp_transport,$(ESPIDF_TCP_TRANSPORT_O)))
 $(eval $(call gen_espidf_lib_rule,esp_tls,$(ESPIDF_TLS_O)))
